/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package io.jetprocess.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import io.jetprocess.model.NoteDocumentMovement;
import io.jetprocess.model.NoteDocumentMovementModel;
import io.jetprocess.model.NoteDocumentMovementSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the NoteDocumentMovement service. Represents a row in the &quot;JP_NoteDocumentMovement&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>NoteDocumentMovementModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link NoteDocumentMovementImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see NoteDocumentMovementImpl
 * @generated
 */
@JSON(strict = true)
public class NoteDocumentMovementModelImpl
	extends BaseModelImpl<NoteDocumentMovement>
	implements NoteDocumentMovementModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a note document movement model instance should use the <code>NoteDocumentMovement</code> interface instead.
	 */
	public static final String TABLE_NAME = "JP_NoteDocumentMovement";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"id_", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"receiverId", Types.BIGINT}, {"senderId", Types.BIGINT},
		{"noteDocumentId", Types.BIGINT}, {"remarks", Types.VARCHAR},
		{"active_", Types.BOOLEAN}, {"movementType", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("receiverId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("senderId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("noteDocumentId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("remarks", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("active_", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("movementType", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table JP_NoteDocumentMovement (uuid_ VARCHAR(75) null,id_ LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,receiverId LONG,senderId LONG,noteDocumentId LONG,remarks VARCHAR(500) null,active_ BOOLEAN,movementType LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table JP_NoteDocumentMovement";

	public static final String ORDER_BY_JPQL =
		" ORDER BY noteDocumentMovement.id ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY JP_NoteDocumentMovement.id_ ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static NoteDocumentMovement toModel(
		NoteDocumentMovementSoap soapModel) {

		if (soapModel == null) {
			return null;
		}

		NoteDocumentMovement model = new NoteDocumentMovementImpl();

		model.setUuid(soapModel.getUuid());
		model.setId(soapModel.getId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setReceiverId(soapModel.getReceiverId());
		model.setSenderId(soapModel.getSenderId());
		model.setNoteDocumentId(soapModel.getNoteDocumentId());
		model.setRemarks(soapModel.getRemarks());
		model.setActive(soapModel.isActive());
		model.setMovementType(soapModel.getMovementType());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<NoteDocumentMovement> toModels(
		NoteDocumentMovementSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<NoteDocumentMovement> models = new ArrayList<NoteDocumentMovement>(
			soapModels.length);

		for (NoteDocumentMovementSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public NoteDocumentMovementModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return NoteDocumentMovement.class;
	}

	@Override
	public String getModelClassName() {
		return NoteDocumentMovement.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<NoteDocumentMovement, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<NoteDocumentMovement, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<NoteDocumentMovement, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((NoteDocumentMovement)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<NoteDocumentMovement, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<NoteDocumentMovement, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(NoteDocumentMovement)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<NoteDocumentMovement, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<NoteDocumentMovement, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, NoteDocumentMovement>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			NoteDocumentMovement.class.getClassLoader(),
			NoteDocumentMovement.class, ModelWrapper.class);

		try {
			Constructor<NoteDocumentMovement> constructor =
				(Constructor<NoteDocumentMovement>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<NoteDocumentMovement, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<NoteDocumentMovement, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<NoteDocumentMovement, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<NoteDocumentMovement, Object>>();
		Map<String, BiConsumer<NoteDocumentMovement, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<NoteDocumentMovement, ?>>();

		attributeGetterFunctions.put("uuid", NoteDocumentMovement::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<NoteDocumentMovement, String>)
				NoteDocumentMovement::setUuid);
		attributeGetterFunctions.put("id", NoteDocumentMovement::getId);
		attributeSetterBiConsumers.put(
			"id",
			(BiConsumer<NoteDocumentMovement, Long>)
				NoteDocumentMovement::setId);
		attributeGetterFunctions.put(
			"groupId", NoteDocumentMovement::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<NoteDocumentMovement, Long>)
				NoteDocumentMovement::setGroupId);
		attributeGetterFunctions.put(
			"companyId", NoteDocumentMovement::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<NoteDocumentMovement, Long>)
				NoteDocumentMovement::setCompanyId);
		attributeGetterFunctions.put("userId", NoteDocumentMovement::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<NoteDocumentMovement, Long>)
				NoteDocumentMovement::setUserId);
		attributeGetterFunctions.put(
			"userName", NoteDocumentMovement::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<NoteDocumentMovement, String>)
				NoteDocumentMovement::setUserName);
		attributeGetterFunctions.put(
			"createDate", NoteDocumentMovement::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<NoteDocumentMovement, Date>)
				NoteDocumentMovement::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", NoteDocumentMovement::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<NoteDocumentMovement, Date>)
				NoteDocumentMovement::setModifiedDate);
		attributeGetterFunctions.put(
			"receiverId", NoteDocumentMovement::getReceiverId);
		attributeSetterBiConsumers.put(
			"receiverId",
			(BiConsumer<NoteDocumentMovement, Long>)
				NoteDocumentMovement::setReceiverId);
		attributeGetterFunctions.put(
			"senderId", NoteDocumentMovement::getSenderId);
		attributeSetterBiConsumers.put(
			"senderId",
			(BiConsumer<NoteDocumentMovement, Long>)
				NoteDocumentMovement::setSenderId);
		attributeGetterFunctions.put(
			"noteDocumentId", NoteDocumentMovement::getNoteDocumentId);
		attributeSetterBiConsumers.put(
			"noteDocumentId",
			(BiConsumer<NoteDocumentMovement, Long>)
				NoteDocumentMovement::setNoteDocumentId);
		attributeGetterFunctions.put(
			"remarks", NoteDocumentMovement::getRemarks);
		attributeSetterBiConsumers.put(
			"remarks",
			(BiConsumer<NoteDocumentMovement, String>)
				NoteDocumentMovement::setRemarks);
		attributeGetterFunctions.put("active", NoteDocumentMovement::getActive);
		attributeSetterBiConsumers.put(
			"active",
			(BiConsumer<NoteDocumentMovement, Boolean>)
				NoteDocumentMovement::setActive);
		attributeGetterFunctions.put(
			"movementType", NoteDocumentMovement::getMovementType);
		attributeSetterBiConsumers.put(
			"movementType",
			(BiConsumer<NoteDocumentMovement, Long>)
				NoteDocumentMovement::setMovementType);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_id = id;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getReceiverId() {
		return _receiverId;
	}

	@Override
	public void setReceiverId(long receiverId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_receiverId = receiverId;
	}

	@JSON
	@Override
	public long getSenderId() {
		return _senderId;
	}

	@Override
	public void setSenderId(long senderId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_senderId = senderId;
	}

	@JSON
	@Override
	public long getNoteDocumentId() {
		return _noteDocumentId;
	}

	@Override
	public void setNoteDocumentId(long noteDocumentId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_noteDocumentId = noteDocumentId;
	}

	@JSON
	@Override
	public String getRemarks() {
		if (_remarks == null) {
			return "";
		}
		else {
			return _remarks;
		}
	}

	@Override
	public void setRemarks(String remarks) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_remarks = remarks;
	}

	@JSON
	@Override
	public boolean getActive() {
		return _active;
	}

	@JSON
	@Override
	public boolean isActive() {
		return _active;
	}

	@Override
	public void setActive(boolean active) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_active = active;
	}

	@JSON
	@Override
	public long getMovementType() {
		return _movementType;
	}

	@Override
	public void setMovementType(long movementType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_movementType = movementType;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(NoteDocumentMovement.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), NoteDocumentMovement.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public NoteDocumentMovement toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, NoteDocumentMovement>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		NoteDocumentMovementImpl noteDocumentMovementImpl =
			new NoteDocumentMovementImpl();

		noteDocumentMovementImpl.setUuid(getUuid());
		noteDocumentMovementImpl.setId(getId());
		noteDocumentMovementImpl.setGroupId(getGroupId());
		noteDocumentMovementImpl.setCompanyId(getCompanyId());
		noteDocumentMovementImpl.setUserId(getUserId());
		noteDocumentMovementImpl.setUserName(getUserName());
		noteDocumentMovementImpl.setCreateDate(getCreateDate());
		noteDocumentMovementImpl.setModifiedDate(getModifiedDate());
		noteDocumentMovementImpl.setReceiverId(getReceiverId());
		noteDocumentMovementImpl.setSenderId(getSenderId());
		noteDocumentMovementImpl.setNoteDocumentId(getNoteDocumentId());
		noteDocumentMovementImpl.setRemarks(getRemarks());
		noteDocumentMovementImpl.setActive(isActive());
		noteDocumentMovementImpl.setMovementType(getMovementType());

		noteDocumentMovementImpl.resetOriginalValues();

		return noteDocumentMovementImpl;
	}

	@Override
	public NoteDocumentMovement cloneWithOriginalValues() {
		NoteDocumentMovementImpl noteDocumentMovementImpl =
			new NoteDocumentMovementImpl();

		noteDocumentMovementImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		noteDocumentMovementImpl.setId(
			this.<Long>getColumnOriginalValue("id_"));
		noteDocumentMovementImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		noteDocumentMovementImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		noteDocumentMovementImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		noteDocumentMovementImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		noteDocumentMovementImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		noteDocumentMovementImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		noteDocumentMovementImpl.setReceiverId(
			this.<Long>getColumnOriginalValue("receiverId"));
		noteDocumentMovementImpl.setSenderId(
			this.<Long>getColumnOriginalValue("senderId"));
		noteDocumentMovementImpl.setNoteDocumentId(
			this.<Long>getColumnOriginalValue("noteDocumentId"));
		noteDocumentMovementImpl.setRemarks(
			this.<String>getColumnOriginalValue("remarks"));
		noteDocumentMovementImpl.setActive(
			this.<Boolean>getColumnOriginalValue("active_"));
		noteDocumentMovementImpl.setMovementType(
			this.<Long>getColumnOriginalValue("movementType"));

		return noteDocumentMovementImpl;
	}

	@Override
	public int compareTo(NoteDocumentMovement noteDocumentMovement) {
		long primaryKey = noteDocumentMovement.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof NoteDocumentMovement)) {
			return false;
		}

		NoteDocumentMovement noteDocumentMovement =
			(NoteDocumentMovement)object;

		long primaryKey = noteDocumentMovement.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<NoteDocumentMovement> toCacheModel() {
		NoteDocumentMovementCacheModel noteDocumentMovementCacheModel =
			new NoteDocumentMovementCacheModel();

		noteDocumentMovementCacheModel.uuid = getUuid();

		String uuid = noteDocumentMovementCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			noteDocumentMovementCacheModel.uuid = null;
		}

		noteDocumentMovementCacheModel.id = getId();

		noteDocumentMovementCacheModel.groupId = getGroupId();

		noteDocumentMovementCacheModel.companyId = getCompanyId();

		noteDocumentMovementCacheModel.userId = getUserId();

		noteDocumentMovementCacheModel.userName = getUserName();

		String userName = noteDocumentMovementCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			noteDocumentMovementCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			noteDocumentMovementCacheModel.createDate = createDate.getTime();
		}
		else {
			noteDocumentMovementCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			noteDocumentMovementCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			noteDocumentMovementCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		noteDocumentMovementCacheModel.receiverId = getReceiverId();

		noteDocumentMovementCacheModel.senderId = getSenderId();

		noteDocumentMovementCacheModel.noteDocumentId = getNoteDocumentId();

		noteDocumentMovementCacheModel.remarks = getRemarks();

		String remarks = noteDocumentMovementCacheModel.remarks;

		if ((remarks != null) && (remarks.length() == 0)) {
			noteDocumentMovementCacheModel.remarks = null;
		}

		noteDocumentMovementCacheModel.active = isActive();

		noteDocumentMovementCacheModel.movementType = getMovementType();

		return noteDocumentMovementCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<NoteDocumentMovement, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<NoteDocumentMovement, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<NoteDocumentMovement, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(NoteDocumentMovement)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<NoteDocumentMovement, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<NoteDocumentMovement, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<NoteDocumentMovement, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(
				attributeGetterFunction.apply((NoteDocumentMovement)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, NoteDocumentMovement>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private long _id;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _receiverId;
	private long _senderId;
	private long _noteDocumentId;
	private String _remarks;
	private boolean _active;
	private long _movementType;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<NoteDocumentMovement, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((NoteDocumentMovement)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("id_", _id);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("receiverId", _receiverId);
		_columnOriginalValues.put("senderId", _senderId);
		_columnOriginalValues.put("noteDocumentId", _noteDocumentId);
		_columnOriginalValues.put("remarks", _remarks);
		_columnOriginalValues.put("active_", _active);
		_columnOriginalValues.put("movementType", _movementType);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");
		attributeNames.put("id_", "id");
		attributeNames.put("active_", "active");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("id_", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("receiverId", 256L);

		columnBitmasks.put("senderId", 512L);

		columnBitmasks.put("noteDocumentId", 1024L);

		columnBitmasks.put("remarks", 2048L);

		columnBitmasks.put("active_", 4096L);

		columnBitmasks.put("movementType", 8192L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private NoteDocumentMovement _escapedModel;

}